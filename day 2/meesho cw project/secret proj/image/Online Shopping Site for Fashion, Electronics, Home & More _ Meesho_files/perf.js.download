const LCP_SUB_PARTS=["Time to First Byte","Resource Load Delay","Resource Load Time","Element Render Delay"];new PerformanceObserver((e=>{const s=e.getEntries().at(-1),n=performance.getEntriesByType("navigation")[0],r=performance.getEntriesByType("resource").filter((e=>e.name===s.url))[0];if(!s.url)return;const t=n.responseStart,a=Math.max(t,r?r.requestStart||r.startTime:0),o=Math.max(a,r?r.responseEnd:0),i=Math.max(o,s?s.renderTime||s.loadTime:0);LCP_SUB_PARTS.forEach((e=>performance.clearMeasures(e)));const l=a-t,c=o-a,u=i-o;window.TTFB=t,window.resourceLoadDelay=l,window.resourceLoadTime=c,window.elementRenderDelay=u,window.LCPValue=i,window.lcpElement=s.element})).observe({type:"largest-contentful-paint",buffered:!0});let clsValue=0,clsEntries=[],sessionValue=0,sessionEntries=[];new PerformanceObserver((e=>{for(const s of e.getEntries())if(!s.hadRecentInput){const e=sessionEntries[0],n=sessionEntries[sessionEntries.length-1];if(sessionValue&&s.startTime-n.startTime<1e3&&s.startTime-e.startTime<5e3?(sessionValue+=s.value,sessionEntries.push(s)):(sessionValue=s.value,sessionEntries=[s]),sessionValue>clsValue){clsValue+=sessionValue,clsEntries=sessionEntries,window.clsValue=clsValue;const e=clsEntries.filter((e=>e.value>0)),s=[];e.forEach((e=>{e.sources.forEach((n=>{s.push({className:n.node.className,value:e.value})}))})),window.clsElements=s}}})).observe({type:"layout-shift",buffered:!0});